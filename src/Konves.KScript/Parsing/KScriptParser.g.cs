//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.3
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\steve\Konves.KScript\src\Konves.KScript.Grammar\KScript.g4 by ANTLR 4.5.3

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Konves.KScript.Parsing {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.3")]
[System.CLSCompliant(false)]
internal partial class KScriptParser : Parser {
	public const int
		STRING=1, NAMED_TOKEN=2, AND=3, IN=4, BETWEEN=5, NOT=6, NOW=7, NULL=8, 
		OR=9, TRUE=10, FALSE=11, COMMA=12, OPEN_BRACKET=13, CLOSE_BRACKET=14, 
		OPEN_PAREN=15, CLOSE_PAREN=16, NUMBER=17, GT=18, GT_ET=19, LT=20, LT_ET=21, 
		EQ=22, NE=23, WS=24;
	public const int
		RULE_root = 0, RULE_literal = 1, RULE_expression = 2, RULE_betweenExpression = 3, 
		RULE_inExpression = 4, RULE_relationalExpression = 5, RULE_list = 6;
	public static readonly string[] ruleNames = {
		"root", "literal", "expression", "betweenExpression", "inExpression", 
		"relationalExpression", "list"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		"','", "'['", "']'", "'('", "')'", null, "'>'", "'>='", "'<'", "'<='"
	};
	private static readonly string[] _SymbolicNames = {
		null, "STRING", "NAMED_TOKEN", "AND", "IN", "BETWEEN", "NOT", "NOW", "NULL", 
		"OR", "TRUE", "FALSE", "COMMA", "OPEN_BRACKET", "CLOSE_BRACKET", "OPEN_PAREN", 
		"CLOSE_PAREN", "NUMBER", "GT", "GT_ET", "LT", "LT_ET", "EQ", "NE", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "KScript.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public KScriptParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class RootContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(KScriptParser.Eof, 0); }
		public RootContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_root; } }
		public override void EnterRule(IParseTreeListener listener) {
			IKScriptListener typedListener = listener as IKScriptListener;
			if (typedListener != null) typedListener.EnterRoot(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IKScriptListener typedListener = listener as IKScriptListener;
			if (typedListener != null) typedListener.ExitRoot(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKScriptVisitor<TResult> typedVisitor = visitor as IKScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoot(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RootContext root() {
		RootContext _localctx = new RootContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_root);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 14; expression(0);
			State = 15; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public ITerminalNode NAMED_TOKEN() { return GetToken(KScriptParser.NAMED_TOKEN, 0); }
		public ITerminalNode TRUE() { return GetToken(KScriptParser.TRUE, 0); }
		public ITerminalNode FALSE() { return GetToken(KScriptParser.FALSE, 0); }
		public ITerminalNode NUMBER() { return GetToken(KScriptParser.NUMBER, 0); }
		public ITerminalNode STRING() { return GetToken(KScriptParser.STRING, 0); }
		public ITerminalNode NOW() { return GetToken(KScriptParser.NOW, 0); }
		public ITerminalNode NULL() { return GetToken(KScriptParser.NULL, 0); }
		public ITerminalNode OPEN_PAREN() { return GetToken(KScriptParser.OPEN_PAREN, 0); }
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public ITerminalNode CLOSE_PAREN() { return GetToken(KScriptParser.CLOSE_PAREN, 0); }
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			IKScriptListener typedListener = listener as IKScriptListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IKScriptListener typedListener = listener as IKScriptListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKScriptVisitor<TResult> typedVisitor = visitor as IKScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_literal);
		try {
			State = 28;
			switch (_input.La(1)) {
			case NAMED_TOKEN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 17; Match(NAMED_TOKEN);
				}
				break;
			case TRUE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 18; Match(TRUE);
				}
				break;
			case FALSE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 19; Match(FALSE);
				}
				break;
			case NUMBER:
				EnterOuterAlt(_localctx, 4);
				{
				State = 20; Match(NUMBER);
				}
				break;
			case STRING:
				EnterOuterAlt(_localctx, 5);
				{
				State = 21; Match(STRING);
				}
				break;
			case NOW:
				EnterOuterAlt(_localctx, 6);
				{
				State = 22; Match(NOW);
				}
				break;
			case NULL:
				EnterOuterAlt(_localctx, 7);
				{
				State = 23; Match(NULL);
				}
				break;
			case OPEN_PAREN:
				EnterOuterAlt(_localctx, 8);
				{
				State = 24; Match(OPEN_PAREN);
				State = 25; literal();
				State = 26; Match(CLOSE_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ITerminalNode TRUE() { return GetToken(KScriptParser.TRUE, 0); }
		public ITerminalNode FALSE() { return GetToken(KScriptParser.FALSE, 0); }
		public BetweenExpressionContext betweenExpression() {
			return GetRuleContext<BetweenExpressionContext>(0);
		}
		public InExpressionContext inExpression() {
			return GetRuleContext<InExpressionContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode AND() { return GetToken(KScriptParser.AND, 0); }
		public ITerminalNode OR() { return GetToken(KScriptParser.OR, 0); }
		public RelationalExpressionContext relationalExpression() {
			return GetRuleContext<RelationalExpressionContext>(0);
		}
		public ITerminalNode OPEN_PAREN() { return GetToken(KScriptParser.OPEN_PAREN, 0); }
		public ITerminalNode CLOSE_PAREN() { return GetToken(KScriptParser.CLOSE_PAREN, 0); }
		public ITerminalNode NOT() { return GetToken(KScriptParser.NOT, 0); }
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IKScriptListener typedListener = listener as IKScriptListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IKScriptListener typedListener = listener as IKScriptListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKScriptVisitor<TResult> typedVisitor = visitor as IKScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(_ctx, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 4;
		EnterRecursionRule(_localctx, 4, RULE_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 42;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,1,_ctx) ) {
			case 1:
				{
				State = 31; Match(TRUE);
				}
				break;

			case 2:
				{
				State = 32; Match(FALSE);
				}
				break;

			case 3:
				{
				State = 33; betweenExpression();
				}
				break;

			case 4:
				{
				State = 34; inExpression();
				}
				break;

			case 5:
				{
				State = 35; relationalExpression();
				}
				break;

			case 6:
				{
				State = 36; Match(OPEN_PAREN);
				State = 37; expression(0);
				State = 38; Match(CLOSE_PAREN);
				}
				break;

			case 7:
				{
				State = 40; Match(NOT);
				State = 41; expression(1);
				}
				break;
			}
			_ctx.stop = _input.Lt(-1);
			State = 52;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,3,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 50;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,2,_ctx) ) {
					case 1:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 44;
						if (!(Precpred(_ctx, 5))) throw new FailedPredicateException(this, "Precpred(_ctx, 5)");
						State = 45; Match(AND);
						State = 46; expression(6);
						}
						break;

					case 2:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 47;
						if (!(Precpred(_ctx, 4))) throw new FailedPredicateException(this, "Precpred(_ctx, 4)");
						State = 48; Match(OR);
						State = 49; expression(5);
						}
						break;
					}
					} 
				}
				State = 54;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,3,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class BetweenExpressionContext : ParserRuleContext {
		public LiteralContext[] literal() {
			return GetRuleContexts<LiteralContext>();
		}
		public LiteralContext literal(int i) {
			return GetRuleContext<LiteralContext>(i);
		}
		public ITerminalNode BETWEEN() { return GetToken(KScriptParser.BETWEEN, 0); }
		public ITerminalNode AND() { return GetToken(KScriptParser.AND, 0); }
		public BetweenExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_betweenExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IKScriptListener typedListener = listener as IKScriptListener;
			if (typedListener != null) typedListener.EnterBetweenExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IKScriptListener typedListener = listener as IKScriptListener;
			if (typedListener != null) typedListener.ExitBetweenExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKScriptVisitor<TResult> typedVisitor = visitor as IKScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBetweenExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BetweenExpressionContext betweenExpression() {
		BetweenExpressionContext _localctx = new BetweenExpressionContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_betweenExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 55; literal();
			State = 56; Match(BETWEEN);
			State = 57; literal();
			State = 58; Match(AND);
			State = 59; literal();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InExpressionContext : ParserRuleContext {
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public ITerminalNode IN() { return GetToken(KScriptParser.IN, 0); }
		public ListContext list() {
			return GetRuleContext<ListContext>(0);
		}
		public InExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IKScriptListener typedListener = listener as IKScriptListener;
			if (typedListener != null) typedListener.EnterInExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IKScriptListener typedListener = listener as IKScriptListener;
			if (typedListener != null) typedListener.ExitInExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKScriptVisitor<TResult> typedVisitor = visitor as IKScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InExpressionContext inExpression() {
		InExpressionContext _localctx = new InExpressionContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_inExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 61; literal();
			State = 62; Match(IN);
			State = 63; list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelationalExpressionContext : ParserRuleContext {
		public LiteralContext[] literal() {
			return GetRuleContexts<LiteralContext>();
		}
		public LiteralContext literal(int i) {
			return GetRuleContext<LiteralContext>(i);
		}
		public ITerminalNode GT() { return GetToken(KScriptParser.GT, 0); }
		public ITerminalNode GT_ET() { return GetToken(KScriptParser.GT_ET, 0); }
		public ITerminalNode LT() { return GetToken(KScriptParser.LT, 0); }
		public ITerminalNode LT_ET() { return GetToken(KScriptParser.LT_ET, 0); }
		public ITerminalNode EQ() { return GetToken(KScriptParser.EQ, 0); }
		public ITerminalNode NE() { return GetToken(KScriptParser.NE, 0); }
		public RelationalExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relationalExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IKScriptListener typedListener = listener as IKScriptListener;
			if (typedListener != null) typedListener.EnterRelationalExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IKScriptListener typedListener = listener as IKScriptListener;
			if (typedListener != null) typedListener.ExitRelationalExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKScriptVisitor<TResult> typedVisitor = visitor as IKScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelationalExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RelationalExpressionContext relationalExpression() {
		RelationalExpressionContext _localctx = new RelationalExpressionContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_relationalExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 65; literal();
			State = 66;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << GT) | (1L << GT_ET) | (1L << LT) | (1L << LT_ET) | (1L << EQ) | (1L << NE))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				Consume();
			}
			State = 67; literal();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ListContext : ParserRuleContext {
		public ITerminalNode OPEN_BRACKET() { return GetToken(KScriptParser.OPEN_BRACKET, 0); }
		public LiteralContext[] literal() {
			return GetRuleContexts<LiteralContext>();
		}
		public LiteralContext literal(int i) {
			return GetRuleContext<LiteralContext>(i);
		}
		public ITerminalNode CLOSE_BRACKET() { return GetToken(KScriptParser.CLOSE_BRACKET, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(KScriptParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(KScriptParser.COMMA, i);
		}
		public ListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_list; } }
		public override void EnterRule(IParseTreeListener listener) {
			IKScriptListener typedListener = listener as IKScriptListener;
			if (typedListener != null) typedListener.EnterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IKScriptListener typedListener = listener as IKScriptListener;
			if (typedListener != null) typedListener.ExitList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKScriptVisitor<TResult> typedVisitor = visitor as IKScriptVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ListContext list() {
		ListContext _localctx = new ListContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 69; Match(OPEN_BRACKET);
			State = 70; literal();
			State = 75;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==COMMA) {
				{
				{
				State = 71; Match(COMMA);
				State = 72; literal();
				}
				}
				State = 77;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 78; Match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 2: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 5);

		case 1: return Precpred(_ctx, 4);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\x1AS\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x3\x2\x3"+
		"\x2\x3\x2\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3"+
		"\x3\x3\x5\x3\x1F\n\x3\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4"+
		"\x3\x4\x3\x4\x3\x4\x3\x4\x5\x4-\n\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3"+
		"\x4\a\x4\x35\n\x4\f\x4\xE\x4\x38\v\x4\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3"+
		"\x5\x3\x6\x3\x6\x3\x6\x3\x6\x3\a\x3\a\x3\a\x3\a\x3\b\x3\b\x3\b\x3\b\a"+
		"\bL\n\b\f\b\xE\bO\v\b\x3\b\x3\b\x3\b\x2\x2\x3\x6\t\x2\x2\x4\x2\x6\x2\b"+
		"\x2\n\x2\f\x2\xE\x2\x2\x3\x3\x2\x14\x19[\x2\x10\x3\x2\x2\x2\x4\x1E\x3"+
		"\x2\x2\x2\x6,\x3\x2\x2\x2\b\x39\x3\x2\x2\x2\n?\x3\x2\x2\x2\f\x43\x3\x2"+
		"\x2\x2\xEG\x3\x2\x2\x2\x10\x11\x5\x6\x4\x2\x11\x12\a\x2\x2\x3\x12\x3\x3"+
		"\x2\x2\x2\x13\x1F\a\x4\x2\x2\x14\x1F\a\f\x2\x2\x15\x1F\a\r\x2\x2\x16\x1F"+
		"\a\x13\x2\x2\x17\x1F\a\x3\x2\x2\x18\x1F\a\t\x2\x2\x19\x1F\a\n\x2\x2\x1A"+
		"\x1B\a\x11\x2\x2\x1B\x1C\x5\x4\x3\x2\x1C\x1D\a\x12\x2\x2\x1D\x1F\x3\x2"+
		"\x2\x2\x1E\x13\x3\x2\x2\x2\x1E\x14\x3\x2\x2\x2\x1E\x15\x3\x2\x2\x2\x1E"+
		"\x16\x3\x2\x2\x2\x1E\x17\x3\x2\x2\x2\x1E\x18\x3\x2\x2\x2\x1E\x19\x3\x2"+
		"\x2\x2\x1E\x1A\x3\x2\x2\x2\x1F\x5\x3\x2\x2\x2 !\b\x4\x1\x2!-\a\f\x2\x2"+
		"\"-\a\r\x2\x2#-\x5\b\x5\x2$-\x5\n\x6\x2%-\x5\f\a\x2&\'\a\x11\x2\x2\'("+
		"\x5\x6\x4\x2()\a\x12\x2\x2)-\x3\x2\x2\x2*+\a\b\x2\x2+-\x5\x6\x4\x3, \x3"+
		"\x2\x2\x2,\"\x3\x2\x2\x2,#\x3\x2\x2\x2,$\x3\x2\x2\x2,%\x3\x2\x2\x2,&\x3"+
		"\x2\x2\x2,*\x3\x2\x2\x2-\x36\x3\x2\x2\x2./\f\a\x2\x2/\x30\a\x5\x2\x2\x30"+
		"\x35\x5\x6\x4\b\x31\x32\f\x6\x2\x2\x32\x33\a\v\x2\x2\x33\x35\x5\x6\x4"+
		"\a\x34.\x3\x2\x2\x2\x34\x31\x3\x2\x2\x2\x35\x38\x3\x2\x2\x2\x36\x34\x3"+
		"\x2\x2\x2\x36\x37\x3\x2\x2\x2\x37\a\x3\x2\x2\x2\x38\x36\x3\x2\x2\x2\x39"+
		":\x5\x4\x3\x2:;\a\a\x2\x2;<\x5\x4\x3\x2<=\a\x5\x2\x2=>\x5\x4\x3\x2>\t"+
		"\x3\x2\x2\x2?@\x5\x4\x3\x2@\x41\a\x6\x2\x2\x41\x42\x5\xE\b\x2\x42\v\x3"+
		"\x2\x2\x2\x43\x44\x5\x4\x3\x2\x44\x45\t\x2\x2\x2\x45\x46\x5\x4\x3\x2\x46"+
		"\r\x3\x2\x2\x2GH\a\xF\x2\x2HM\x5\x4\x3\x2IJ\a\xE\x2\x2JL\x5\x4\x3\x2K"+
		"I\x3\x2\x2\x2LO\x3\x2\x2\x2MK\x3\x2\x2\x2MN\x3\x2\x2\x2NP\x3\x2\x2\x2"+
		"OM\x3\x2\x2\x2PQ\a\x10\x2\x2Q\xF\x3\x2\x2\x2\a\x1E,\x34\x36M";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace Konves.KScript.Parsing
